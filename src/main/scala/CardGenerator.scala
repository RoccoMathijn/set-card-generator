import java.io.FileWriter
import java.nio.file.{ Files, Paths }

import GameDefinitions._

import scala.collection.AbstractSeq
import scala.xml.{ Elem, Node }


object CardGenerator {

  private val colors: Map[Color, String] = Map(
    Red -> "#ff0000",
    Green -> "#08ff00",
    Purple -> "#bb00ff"
  )
  private val patterns: Map[Pattern, String => String] = Map(
    Empty -> { (color: String) => s"""opacity:1;fill:none;fill-opacity:1;stroke:$color;stroke-opacity:1;stroke-width:5;stroke-miterlimit:5.5;stroke-dasharray:none;fill-rule:evenodd""" },
    Striped -> { (color: String) => s"""opacity:1;fill:url(#Strips1_1);fill-opacity:1.0;stroke:$color;stroke-opacity:1;stroke-width:5;stroke-miterlimit:5.5;stroke-dasharray:none;fill-rule:evenodd""" },
    Filled -> { (color: String) => s"""opacity:1;fill:$color;fill-opacity:1;stroke:none;stroke-opacity:1;stroke-width:5;stroke-miterlimit:5.5;stroke-dasharray:none;fill-rule:evenodd""" }
  )
  private val shapesAndNumbers: Map[(Shape, Number), (String) => AbstractSeq[Node] with Serializable] = Map(
    (Diamond, One) -> { (pattern: String) =>
        <path style={pattern} d="M 256.88976,304.03094 454.55302,398.62204 256.88976,493.21315 59.22651,398.62204 Z"/>
    },
    (Diamond, Two) -> { (pattern: String) =>
        <path style={pattern} d="M 256.88976,184.03093 454.55302,278.62203 256.88976,373.21314 59.226508,278.62203 Z"/>
          <path style={pattern} d="M 256.88994,424.03095 454.5532,518.62205 256.88994,613.21316 59.226691,518.62205 Z"/>
    },
    (Diamond, Three) -> { (pattern: String) =>
        <path style={pattern} d="M 256.88976,64.030942 454.55302,158.62204 256.88976,253.21315 59.226508,158.62204 Z"/>
          <path style={pattern} d="M 256.88994,304.03096 454.5532,398.62206 256.88994,493.21317 59.226691,398.62206 Z"/>
          <path style={pattern} d="M 256.89009,544.03094 454.55335,638.62204 256.89009,733.21315 59.226844,638.62204 Z"/>
    },
    (Square, One) -> { (pattern: String) =>
        <rect style={pattern} width="409" height="199" x="52.389763" y="299.12204" ry="99.5"/>
    },
    (Square, Two) -> { (pattern: String) =>
        <rect style={pattern} id="rect3386" width="409" height="199" x="52.389763" y="422.17432" ry="99.5"/>
          <rect style={pattern} id="rect3475" width="409" height="199" x="57.336235" y="176.06978" ry="99.5"/>
    },
    (Square, Three) -> { (pattern: String) =>
        <rect style={pattern} id="rect3386" width="409" height="199" x="52.389763" y="299.13953" ry="99.5"/>
          <rect style={pattern} ry="99.5" y="545.24408" x="52.389763" height="199" width="409"/>
          <rect style={pattern} width="409" height="199" x="57.336235" y="53.034992" ry="99.5"/>
    },
    (Wave, One) -> { (pattern: String) =>
        <path style={pattern} d="m 76.319341,494.35323 c -13.74988,-4.4989 -23.07232,-25.3014 -20.70059,-46.1922 2.74082,-24.14193 17.44549,-49.64162 47.858039,-82.99166 9.56063,-10.48409 38.98755,-41.32394 47.87288,-50.1715 11.80396,-11.75377 24.12609,-15.43814 41.43751,-12.38998 10.72571,1.88855 20.50948,5.52715 41.34356,15.3757 39.70066,18.76704 50.24984,22.49208 66.07143,23.33056 16.63562,0.88162 29.15224,-3.12429 67.85714,-21.71749 27.52951,-13.22473 36.73143,-16.44511 48.93175,-17.12458 12.71683,-0.70823 19.47125,1.86493 28.24855,10.76156 9.6864,9.8181 13.66808,19.92881 12.98107,32.96302 -1.32978,25.22923 -23.15944,56.50554 -66.25579,94.92758 -12.37609,11.03379 -42.46389,36.29789 -47.47701,39.86549 -16.2082,11.5346 -34.11757,12.7255 -56.4652,3.7547 -5.93345,-2.3819 -11.02951,-4.9436 -35.68205,-17.937 -17.87836,-9.4229 -26.88125,-12.9632 -37.81411,-14.8697 -7.84974,-1.3689 -11.47252,-1.3778 -19.05222,-0.047 -12.83218,2.2528 -25.06544,7.3253 -53.51193,22.189 -30.47089,15.9213 -43.026339,20.8215 -54.974499,21.4556 -4.86713,0.2583 -6.98329,0.024 -10.66853,-1.182 z"/>
    },
    (Wave, Two) -> { (pattern: String) =>
        <path style={pattern} d="m 76.319341,374.35324 c -13.74988,-4.4989 -23.07232,-25.3014 -20.70059,-46.1922 2.74082,-24.14193 17.44549,-49.64162 47.858039,-82.99166 9.56063,-10.48409 38.98755,-41.32394 47.87288,-50.1715 11.80396,-11.75377 24.12609,-15.43814 41.43751,-12.38998 10.72571,1.88855 20.50948,5.52715 41.34356,15.3757 39.70066,18.76704 50.24984,22.49208 66.07143,23.33056 16.63562,0.88162 29.15224,-3.12429 67.85714,-21.71749 27.52951,-13.22473 36.73143,-16.44511 48.93175,-17.12458 12.71683,-0.70823 19.47125,1.86493 28.24855,10.76156 9.6864,9.8181 13.66808,19.92881 12.98107,32.96302 -1.32978,25.22923 -23.15944,56.50554 -66.25579,94.92758 -12.37609,11.03379 -42.46389,36.29789 -47.47701,39.86549 -16.2082,11.5346 -34.11757,12.7255 -56.4652,3.7547 -5.93345,-2.3819 -11.02951,-4.9436 -35.68205,-17.937 -17.87836,-9.4229 -26.88125,-12.9632 -37.81411,-14.8697 -7.84974,-1.3689 -11.47252,-1.3778 -19.05222,-0.047 -12.83218,2.2528 -25.06544,7.3253 -53.51193,22.189 -30.47089,15.9213 -43.026339,20.8215 -54.974499,21.4556 -4.86713,0.2583 -6.98329,0.024 -10.66853,-1.182 z"/>
          <path style={pattern} d="m 76.319341,614.35322 c -13.74988,-4.4989 -23.07232,-25.3014 -20.70059,-46.1922 2.74082,-24.14193 17.44549,-49.64162 47.858039,-82.99166 9.56063,-10.48409 38.98755,-41.32394 47.87288,-50.1715 11.80396,-11.75377 24.12609,-15.43814 41.43751,-12.38998 10.72571,1.88855 20.50948,5.52715 41.34356,15.3757 39.70066,18.76704 50.24984,22.49208 66.07143,23.33056 16.63562,0.88162 29.15224,-3.12429 67.85714,-21.71749 27.52951,-13.22473 36.73143,-16.44511 48.93175,-17.12458 12.71683,-0.70823 19.47125,1.86493 28.24855,10.76156 9.6864,9.8181 13.66808,19.92881 12.98107,32.96302 -1.32978,25.22923 -23.15944,56.50554 -66.25579,94.92758 -12.37609,11.03379 -42.46389,36.29789 -47.47701,39.86549 -16.2082,11.5346 -34.11757,12.7255 -56.4652,3.7547 -5.93345,-2.3819 -11.02951,-4.9436 -35.68205,-17.937 -17.87836,-9.4229 -26.88125,-12.9632 -37.81411,-14.8697 -7.84974,-1.3689 -11.47252,-1.3778 -19.05222,-0.047 -12.83218,2.2528 -25.06544,7.3253 -53.51193,22.189 -30.47089,15.9213 -43.026339,20.8215 -54.974499,21.4556 -4.86713,0.2583 -6.98329,0.024 -10.66853,-1.182 z"/>
    },
    (Wave, Three) -> { (pattern: String) =>
        <path style={pattern} d="m 76.319341,494.35325 c -13.74988,-4.4989 -23.07232,-25.3014 -20.70059,-46.1922 2.74082,-24.14193 17.44549,-49.64162 47.858039,-82.99166 9.56063,-10.48409 38.98755,-41.32394 47.87288,-50.1715 11.80396,-11.75377 24.12609,-15.43814 41.43751,-12.38998 10.72571,1.88855 20.50948,5.52715 41.34356,15.3757 39.70066,18.76704 50.24984,22.49208 66.07143,23.33056 16.63562,0.88162 29.15224,-3.12429 67.85714,-21.71749 27.52951,-13.22473 36.73143,-16.44511 48.93175,-17.12458 12.71683,-0.70823 19.47125,1.86493 28.24855,10.76156 9.6864,9.8181 13.66808,19.92881 12.98107,32.96302 -1.32978,25.22923 -23.15944,56.50554 -66.25579,94.92758 -12.37609,11.03379 -42.46389,36.29789 -47.47701,39.86549 -16.2082,11.5346 -34.11757,12.7255 -56.4652,3.7547 -5.93345,-2.3819 -11.02951,-4.9436 -35.68205,-17.937 -17.87836,-9.4229 -26.88125,-12.9632 -37.81411,-14.8697 -7.84974,-1.3689 -11.47252,-1.3778 -19.05222,-0.047 -12.83218,2.2528 -25.06544,7.3253 -53.51193,22.189 -30.47089,15.9213 -43.026339,20.8215 -54.974499,21.4556 -4.86713,0.2583 -6.98329,0.024 -10.66853,-1.182 z"/>
          <path style={pattern} d="m 76.319341,734.35323 c -13.74988,-4.4989 -23.07232,-25.3014 -20.70059,-46.1922 2.74082,-24.14193 17.44549,-49.64162 47.858039,-82.99166 9.56063,-10.48409 38.98755,-41.32394 47.87288,-50.1715 11.80396,-11.75377 24.12609,-15.43814 41.43751,-12.38998 10.72571,1.88855 20.50948,5.52715 41.34356,15.3757 39.70066,18.76704 50.24984,22.49208 66.07143,23.33056 16.63562,0.88162 29.15224,-3.12429 67.85714,-21.71749 27.52951,-13.22473 36.73143,-16.44511 48.93175,-17.12458 12.71683,-0.70823 19.47125,1.86493 28.24855,10.76156 9.6864,9.8181 13.66808,19.92881 12.98107,32.96302 -1.32978,25.22923 -23.15944,56.50554 -66.25579,94.92758 -12.37609,11.03379 -42.46389,36.29789 -47.47701,39.86549 -16.2082,11.5346 -34.11757,12.7255 -56.4652,3.7547 -5.93345,-2.3819 -11.02951,-4.9436 -35.68205,-17.937 -17.87836,-9.4229 -26.88125,-12.9632 -37.81411,-14.8697 -7.84974,-1.3689 -11.47252,-1.3778 -19.05222,-0.047 -12.83218,2.2528 -25.06544,7.3253 -53.51193,22.189 -30.47089,15.9213 -43.026339,20.8215 -54.974499,21.4556 -4.86713,0.2583 -6.98329,0.024 -10.66853,-1.182 z"/>
          <path style={pattern} d="m 83.449166,254.35323 c -13.74988,-4.4989 -23.07232,-25.3014 -20.70059,-46.1922 2.74082,-24.14193 17.44549,-49.64162 47.858044,-82.99166 9.56063,-10.48409 38.98755,-41.323941 47.87288,-50.171501 11.80396,-11.75377 24.12609,-15.43814 41.43751,-12.38998 10.72571,1.88855 20.50948,5.52715 41.34356,15.3757 39.70066,18.76704 50.24984,22.492081 66.07143,23.330561 16.63562,0.88162 29.15224,-3.124291 67.85714,-21.717491 27.52951,-13.22473 36.73143,-16.44511 48.93175,-17.12458 12.71683,-0.70823 19.47125,1.86493 28.24855,10.76156 9.6864,9.8181 13.66808,19.92881 12.98107,32.963021 -1.32978,25.22923 -23.15944,56.50554 -66.25579,94.92758 -12.37609,11.03379 -42.46389,36.29789 -47.47701,39.86549 -16.2082,11.5346 -34.11757,12.7255 -56.4652,3.7547 -5.93345,-2.3819 -11.02951,-4.9436 -35.68205,-17.937 -17.87836,-9.4229 -26.88125,-12.9632 -37.81411,-14.8697 -7.84974,-1.3689 -11.47252,-1.3778 -19.05222,-0.047 -12.83218,2.2528 -25.06544,7.3253 -53.51193,22.189 -30.47089,15.9213 -43.02634,20.8215 -54.974504,21.4556 -4.86713,0.2583 -6.98329,0.024 -10.66853,-1.182 z"/>
    }
  )

  private def stripesDefinition(color: String) = {
    val style = s"fill:$color;stroke:none"
    <defs>
      <pattern
      inkscape:stockid="Stripes 1:1"
      id="Strips1_1"
      patternTransform="translate(0,0) scale(10,10)"
      height="1"
      width="2"
      patternUnits="userSpaceOnUse"
      inkscape:collect="always">
        <rect
        id="rect4857"
        height="2"
        width="1"
        y="-0.5"
        x="0"
        style={style}/>
      </pattern>
    </defs>
  }

  private def svgTemplate(shapes: AbstractSeq[Node], definitions: Option[Elem]): Elem =
    <svg
    width="145mm"
    height="225mm"
    viewBox="0 0 513.77953 797.24409"
    id="svg3343"
    version="1.1"
    xmlns:osb="http://www.openswatchbook.org/uri/2009/osb"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:cc="http://creativecommons.org/ns#"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:svg="http://www.w3.org/2000/svg"
    xmlns="http://www.w3.org/2000/svg"
    xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
    xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape">
      {definitions.getOrElse(xml.NodeSeq.Empty)}{shapes}
    </svg>

  private def drawCard(card: Card): Elem = {
    val color: String = colors(card.color)
    val pattern = patterns(card.pattern)(color)
    val shape: AbstractSeq[Node] = shapesAndNumbers(card.shape, card.number)(pattern)
    val definitions: Option[Elem] = if (card.pattern == Striped) Some(stripesDefinition(color)) else None
    svgTemplate(shape, definitions)
  }

  def writeSvgDeck(deck: Deck) =
    deck foreach { card =>
      val svg = drawCard(card).toString

      val path = Paths.get("cards")
      Files.createDirectories(path)

      val fileName = s"${card.color.key}${card.shape.key}${card.pattern.key}${card.number.key}.svg"

      val writer = new FileWriter(path + "/" + fileName)
      writer.write(svg)
      writer.close()
    }
}
